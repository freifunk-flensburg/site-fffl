diff --git a/package/gluon-radv-filterd/src/gluon-radv-filterd.c b/package/gluon-radv-filterd/src/gluon-radv-filterd.c
index b1620cae..ab79de26 100644
--- a/package/gluon-radv-filterd/src/gluon-radv-filterd.c
+++ b/package/gluon-radv-filterd/src/gluon-radv-filterd.c
@@ -59,11 +59,11 @@

 #include "mac.h"

-// Recheck TQs after this time even if no RA was received
+// Recheck THROUGHPUTs after this time even if no RA was received
 #define MAX_INTERVAL 60

-// Recheck TQs at most this often, even if new RAs were received (they won't
-// become the preferred routers until the TQs have been rechecked)
+// Recheck THROUGHPUTs at most this often, even if new RAs were received (they won't
+// become the preferred routers until the THROUGHPUTs have been rechecked)
 // Also, the first update will take at least this long
 #define MIN_INTERVAL 15

@@ -74,8 +74,8 @@
 // max execution time of a single ebtables call in nanoseconds
 #define EBTABLES_TIMEOUT 500000000 // 500ms

-// TQ value assigned to local routers
-#define LOCAL_TQ 512
+// THROUGHPUT value assigned to local routers
+#define LOCAL_THROUGHPUT 10000000

 #define BUFSIZE 1500

@@ -108,7 +108,7 @@ struct router {
        struct ether_addr src;
        struct timespec eol;
        struct ether_addr originator;
-       uint16_t tq;
+       uint32_t throughput;
 };

 static struct global {
@@ -116,8 +116,8 @@ static struct global {
        struct router *routers;
        const char *mesh_iface;
        const char *chain;
-       uint16_t max_tq;
-       uint16_t hysteresis_thresh;
+       uint32_t max_throughput;
+       uint32_t hysteresis_thresh;
        struct router *best_router;
        volatile sig_atomic_t stop_daemon;
 } G = {
@@ -188,8 +188,8 @@ static void usage(const char *msg) {
        fprintf(stderr,
                "Usage: %s [-m <mesh_iface>] [-t <thresh>] -c <chain> -i <iface>\n\n"
                "  -m <mesh_iface>  B.A.T.M.A.N. advanced mesh interface used to get metric\n"
-               "                   information (\"TQ\") for the available gateways. Default: bat0\n"
-               "  -t <thresh>      Minimum TQ difference required to switch the gateway.\n"
+               "                   information (\"THROUGHPUT\") for the available gateways. Default: bat0\n"
+               "  -t <thresh>      Minimum THROUGHPUT difference required to switch the gateway.\n"
                "                   Default: 0\n"
                "  -c <chain>       ebtables chain that should be managed by the daemon. The\n"
                "                   chain already has to exist on program invocation and should\n"
@@ -289,9 +289,9 @@ static void parse_cmdline(int argc, char *argv[]) {
                                threshold = strtoul(optarg, &endptr, 10);
                                if (*endptr != '\0')
                                        exit_errmsg("Threshold must be a number: %s", optarg);
-                               if (threshold >= LOCAL_TQ)
-                                       exit_errmsg("Threshold too large: %ld (max is %d)", threshold, LOCAL_TQ);
-                               G.hysteresis_thresh = (uint16_t) threshold;
+                               if (threshold >= LOCAL_THROUGHPUT)
+                                       exit_errmsg("Threshold too large: %ld (max is %d)", threshold, LOCAL_THROUGHPUT);
+                               G.hysteresis_thresh = (uint32_t) threshold;
                                break;
                        case 'h':
                                usage(NULL);
@@ -462,7 +462,7 @@ static int parse_originator(struct nl_msg *msg,

        static const enum batadv_nl_attrs mandatory[] = {
                BATADV_ATTR_ORIG_ADDRESS,
-               BATADV_ATTR_TQ,
+               BATADV_ATTR_THROUGHPUT,
        };
        struct nlattr *attrs[BATADV_ATTR_MAX + 1];
        struct nlmsghdr *nlh = nlmsg_hdr(msg);
@@ -470,7 +470,7 @@ static int parse_originator(struct nl_msg *msg,
        struct genlmsghdr *ghdr;
        struct router *router;
        uint8_t *orig;
-       uint8_t tq;
+       uint32_t throughput;

        // parse netlink entry
        if (!genlmsg_valid_hdr(nlh, 0))
@@ -490,7 +490,7 @@ static int parse_originator(struct nl_msg *msg,
                return NL_OK;

        orig = nla_data(attrs[BATADV_ATTR_ORIG_ADDRESS]);
-       tq = nla_get_u8(attrs[BATADV_ATTR_TQ]);
+       throughput = nla_get_u32(attrs[BATADV_ATTR_THROUGHPUT]);

        if (!attrs[BATADV_ATTR_FLAG_BEST])
                return NL_OK;
@@ -502,11 +502,11 @@ static int parse_originator(struct nl_msg *msg,
        if (!router)
                return NL_OK;

-       DEBUG_MSG("Found TQ for router " F_MAC " (originator " F_MAC "), it's %d",
-                 F_MAC_VAR(router->src), F_MAC_VAR(router->originator), tq);
-       router->tq = tq;
-       if (router->tq > G.max_tq)
-               G.max_tq = router->tq;
+       DEBUG_MSG("Found THROUGHPUT for router " F_MAC " (originator " F_MAC "), it's %d",
+                 F_MAC_VAR(router->src), F_MAC_VAR(router->originator), throughput);
+       router->throughput = throughput;
+       if (router->throughput > G.max_throughput)
+               G.max_throughput = router->throughput;

        return NL_OK;
 }
@@ -549,25 +549,25 @@ static int parse_tt_local(struct nl_msg *msg,
        if (!router)
                return NL_OK;

-       DEBUG_MSG("Found router " F_MAC " in transtable_local, assigning TQ %d",
-                 F_MAC_VAR(router->src), LOCAL_TQ);
-       router->tq = LOCAL_TQ;
-       if (router->tq > G.max_tq)
-               G.max_tq = router->tq;
+       DEBUG_MSG("Found router " F_MAC " in transtable_local, assigning THROUGHPUT %d",
+                 F_MAC_VAR(router->src), LOCAL_THROUGHPUT);
+       router->throughput = LOCAL_THROUGHPUT;
+       if (router->throughput > G.max_throughput)
+               G.max_throughput = router->throughput;

        return NL_OK;
 }

-static void update_tqs(void) {
+static void update_throughputs(void) {
        static const struct ether_addr unspec = {};
        struct router *router;
        bool update_originators = false;
        struct batadv_nlquery_opts opts;
        int ret;

-       // reset TQs
+       // reset THROUGHPUTs
        foreach(router, G.routers) {
-               router->tq = 0;
+               router->throughput = 0;
                if (ether_addr_equal(router->originator, unspec))
                        update_originators = true;
        }
@@ -582,8 +582,8 @@ static void update_tqs(void) {
                        fprintf(stderr, "Parsing of global translation table failed\n");
        }

-       // look up TQs of originators
-       G.max_tq = 0;
+       // look up THROUGHPUTs of originators
+       G.max_throughput = 0;
        opts.err = 0;
        ret = batadv_genl_query(G.mesh_iface,
                                BATADV_CMD_GET_ORIGINATORS,
@@ -591,9 +591,9 @@ static void update_tqs(void) {
        if (ret < 0)
                fprintf(stderr, "Parsing of originators failed\n");

-       // if all routers have a TQ value, we don't need to check translocal
+       // if all routers have a THROUGHPUT value, we don't need to check translocal
        foreach(router, G.routers) {
-               if (router->tq == 0)
+               if (router->throughput == 0)
                        break;
        }
        if (router != NULL) {
@@ -606,14 +606,14 @@ static void update_tqs(void) {
        }

        foreach(router, G.routers) {
-               if (router->tq == 0) {
+               if (router->throughput == 0) {
                        if (ether_addr_equal(router->originator, unspec))
                                DEBUG_MSG(
                                        "Unable to find router " F_MAC " in transtable_{global,local}",
                                        F_MAC_VAR(router->src));
                        else
                                DEBUG_MSG(
-                                       "Unable to find TQ for originator " F_MAC " (router " F_MAC ")",
+                                       "Unable to find THROUGHPUT for originator " F_MAC " (router " F_MAC ")",
                                        F_MAC_VAR(router->originator),
                                        F_MAC_VAR(router->src));
                }
@@ -679,11 +679,11 @@ static bool election_required(void)
        if (!G.best_router)
                return true;

-       /* should never happen. G.max_tq also contains G.best_router->tq */
-       if (G.max_tq < G.best_router->tq)
+       /* should never happen. G.max_throughput also contains G.best_router->throughput */
+       if (G.max_throughput < G.best_router->throughput)
                return false;

-       if ((G.max_tq - G.best_router->tq) <= G.hysteresis_thresh)
+       if ((G.max_throughput - G.best_router->throughput) <= G.hysteresis_thresh)
                return false;

        return true;
@@ -697,29 +697,29 @@ static void update_ebtables(void) {
        struct router *router;

        if (!election_required()) {
-               DEBUG_MSG(F_MAC " is still good enough with TQ=%d (max_tq=%d), not executing ebtables",
+               DEBUG_MSG(F_MAC " is still good enough with THROUGHPUT=%d (max_throughput=%d), not executing ebtables",
                        F_MAC_VAR(G.best_router->src),
-                       G.best_router->tq,
-                       G.max_tq);
+                       G.best_router->throughput,
+                       G.max_throughput);
                return;
        }

        foreach(router, G.routers) {
-               if (router->tq == G.max_tq) {
+               if (router->throughput == G.max_throughput) {
                        snprintf(mac, sizeof(mac), F_MAC, F_MAC_VAR(router->src));
                        break;
                }
        }
        if (G.best_router)
-               fprintf(stderr, "Switching from " F_MAC " (TQ=%d) to %s (TQ=%d)\n",
+               fprintf(stderr, "Switching from " F_MAC " (THROUGHPUT=%d) to %s (THROUGHPUT=%d)\n",
                        F_MAC_VAR(G.best_router->src),
-                       G.best_router->tq,
+                       G.best_router->throughput,
                        mac,
-                       G.max_tq);
+                       G.max_throughput);
        else
-               fprintf(stderr, "Switching to %s (TQ=%d)\n",
+               fprintf(stderr, "Switching to %s (THROUGHPUT=%d)\n",
                        mac,
-                       G.max_tq);
+                       G.max_throughput);
        G.best_router = router;

        if (fork_execvp_timeout(&timeout, "ebtables-tiny", (const char *[])
@@ -804,7 +804,7 @@ int main(int argc, char *argv[]) {
                                        next_invalidation.tv_sec += ORIGINATOR_CACHE_TTL;
                                }

-                               update_tqs();
+                               update_throughputs();
                                update_ebtables();

                                next_update = now;
